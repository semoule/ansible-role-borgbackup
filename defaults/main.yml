---

##
## borgbackup package/binary installation
##
borgbackup_install_from_binary: True
borgbackup_install_from_repo: False
borgbackup_binary_version: "1.1.7"
borgbackup_binary_platform: "borg-linux64"
borgbackup_binary_uri: "https://github.com/borgbackup/borg/releases/download/{{ borgbackup_binary_version }}/{{ borgbackup_binary_platform }}"
borgbackup_binary: "/usr/local/bin/borg"

##
## borgbackup server configuration
##
borgbackup_server: False
borgbackup_server_user: "borgbackup"
borgbackup_server_group: "borgbackup"
borgbackup_server_home: "/srv/borgbackup"
borgbackup_server_pool: "{{ borgbackup_server_home }}/repos"
# ssh pubkey list of sysadmins that manage the borg server
borgbackup_server_admins: []
#  - key: "ssh-rsa abc123..."
#  - key: "ssh-rsa abc456..."
#    state: present
#  - key: "ssh-rsa abc789..."
#    state: absent

##
## borgbackup general configuration
##
# encryption
borgbackup_encryption_mode: "none"
borgbackup_passphrase: "yoursecret"

##
## borg client configuration
##
borgbackup_client: False

# Specify the SSH private key type to use. By default role will generate
# ED25519 keys if they are supported by the remote host, otherwise RSA keys
# will be generated.
borgbackup_client_ssh_key_type: '{{ "ed25519"
                            if ("ssh-ed25519" in borgbackup_register_key_types.stdout_lines)
                            else "rsa" }}'

borgbackup_client_ssh_key_file: "/root/.ssh/id_{{ borgbackup_client_ssh_key_type }}-backup"
borgbackup_client_ssh_key_comment: 'root@{{ ansible_hostname }} generated by Ansible'
borgbackup_client_scripts_dir: "/etc/borg"

# lastlog parsed by supervision
borgbackup_client_lastlog_dir: "/var/log/borg"

# backup server IP or FQDN used during ansible installation AND backup operation.
borgbackup_client_backup_server:

# if defined, IP or FQDN used on backup operation. Usefull in case of LAN-free backup
#borgbackup_client_backup_server_lanfreebackup:

# max retry attempt on create/prune/check task failure. only one attempt if unset.
#borgbackup_task_retry: 3

# retry attempt wait time 
#borgbackup_task_retry_wait: 30

# you have to set at least a "create" job.
# "prune" and "checks" jobs are optionnal, but you should use it too.
borgbackup_create_jobs:

# borgbackup jobs examples :
#borgbackup_create_jobs:
#  - name: system
#    options: "--lock-wait 7200 --compression lzma"
#    day: "*"
#    hour: 0                                                     # default value = 1
#    minute: 0                                                   # default value = 0
#    random_hour: 5                                              # default value : ignore randomization
#    random_minute: 59                                           # default value : ignore randomization
#    directories:
#      - "/etc/"
#      - "/home"
#    excludes: []

borgbackup_prune_enabled: yes
#borgbackup_prune_jobs:
#  - name: system
#    prune_options: "--lock-wait 7200 --keep-daily=7 --keep-weekly=4 --keep-monthly=12 --keep-yearly=-1"
#    day: "*"
#    hour: 12                                                     # default value = 1
#    minute: 0                                                    # default value = 0
#    random_hour: 5                                               # default value : ignore randomization
#    random_minute: 59                                            # default value : ignore randomization

borgbackup_check_enabled: yes
#borgbackup_check_jobs:
#  - name: system
#    check_options: "--lock-wait 28800"
#    day: 1
#    hour: 12                                                     # default value = 1
#    minute: 0                                                    # default value = 0
#    random_hour: 5                                               # default value : ignore randomization
#    random_minute: 59                                            # default value : ignore randomization
#    random_day: 27                                               # default value : ignore randomization

# about random :
# TL;DR : if 'random_hour' is set, then 'hour' will be set by a random value within range 'hour' up to 'hour+random_hour'
# purpose is to set indempotent random crontab values. Usefull when many jobs are croned toward a small number of repository servers.
# random_hour : if defined, a indempotent random value is computed between 0 and the value specified.
# Then, the crontab hour will be addition of hour and random_hour.
# a modulo 24 is applied in order to ensure valid hour are specified.
# random_minute and random_day works the same way.
